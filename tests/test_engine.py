# -*- coding: utf-8 -*-
import os
from collections import Counter
from unittest import TestCase, mock

from malwarefeeds.engine import Engine


class TestEngine(TestCase):

    def setUp(self):
        self.engine = Engine()
        self.cnt = Counter()

    def test_constructor(self):
        self.assertIsNotNone(self.engine)
        self.assertIsInstance(self.engine.malcode, list)
        self.assertIsInstance(self.engine.mdl, list)
        self.assertIsInstance(self.engine.vxvault, list)
        self.assertIsInstance(self.engine.ransomware, list)
        self.assertEqual(self.engine._headers, {'User-agent': 'Mozilla/5.0 (X11; U; Linux i686)'})

    @mock.patch('malwarefeeds.engine.get')
    def test_download(self, mocked):
        self.engine.download()
        mocked.assert_called()

    def test_get_urls(self):
        for feed, url in self.engine.get_urls():
            self.assertIsInstance(feed, str)
            self.assertIsInstance(url, str)

    @mock.patch('malwarefeeds.engine.get')
    def test_get_urls_content(self, mocked):
        files = [
            'malcode.xml',
            'mdl.xml',
            'vxvault.txt',
            'RW_URLBL.txt',
        ]
        for item in files :
            file_path = os.path.join(
                os.path.dirname(os.path.realpath(__file__)),
                'files',
                item
            )
            with open(file_path, 'r') as reader:
                content = str(reader.read())

            mocked.return_value.content = content
            self.engine.download()
            mocked.assert_called()

            for url_data in self.engine.get_urls():
                self.assertIsInstance(url_data, tuple)

    def teste__parse_xml_list_desc(self):
        files = [
            'malcode.xml',
            'mdl.xml'
        ]
        for item in files:
            file_path = os.path.join(
                os.path.dirname(os.path.realpath(__file__)),
                'files',
                item
            )
            with open(file_path, 'r') as reader:
                content = str(reader.read())
            for url_data in self.engine._parse_xml_list_desc(content):
                self.assertIsInstance(url_data, str)

    def test__parse_txt_file(self):
        files = [
            'vxvault.txt',
            'RW_URLBL.txt',
        ]
        for item in files:
            file_path = os.path.join(
                os.path.dirname(os.path.realpath(__file__)),
                'files',
                item
            )
            with open(file_path, 'r') as reader:
                content = str(reader.read())

            for url_data in self.engine._parse_txt_file(content):
                self.assertIsInstance(url_data, str)
